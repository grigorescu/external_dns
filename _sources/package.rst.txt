:orphan:

Package: base/frameworks/logging
================================


:doc:`/scripts/base/frameworks/logging/__load__.zeek`


:doc:`/scripts/base/frameworks/logging/main.zeek`

   The Zeek logging interface.
   
   See :doc:`/frameworks/logging` for an introduction to Zeek's
   logging framework.

:doc:`/scripts/base/frameworks/logging/postprocessors/__load__.zeek`


:doc:`/scripts/base/frameworks/logging/postprocessors/scp.zeek`

   This script defines a postprocessing function that can be applied
   to a logging filter in order to automatically SCP (secure copy)
   a log stream (or a subset of it) to a remote host at configurable
   rotation time intervals.  Generally, to use this functionality
   you must handle the :zeek:id:`zeek_init` event and do the following
   in your handler:
   
   1) Create a new :zeek:type:`Log::Filter` record that defines a name/path,
      rotation interval, and set the ``postprocessor`` to
      :zeek:id:`Log::scp_postprocessor`.
   2) Add the filter to a logging stream using :zeek:id:`Log::add_filter`.
   3) Add a table entry to :zeek:id:`Log::scp_destinations` for the filter's
      writer/path pair which defines a set of :zeek:type:`Log::SCPDestination`
      records.

:doc:`/scripts/base/frameworks/logging/postprocessors/sftp.zeek`

   This script defines a postprocessing function that can be applied
   to a logging filter in order to automatically SFTP
   a log stream (or a subset of it) to a remote host at configurable
   rotation time intervals.  Generally, to use this functionality
   you must handle the :zeek:id:`zeek_init` event and do the following
   in your handler:
   
   1) Create a new :zeek:type:`Log::Filter` record that defines a name/path,
      rotation interval, and set the ``postprocessor`` to
      :zeek:id:`Log::sftp_postprocessor`.
   2) Add the filter to a logging stream using :zeek:id:`Log::add_filter`.
   3) Add a table entry to :zeek:id:`Log::sftp_destinations` for the filter's
      writer/path pair which defines a set of :zeek:type:`Log::SFTPDestination`
      records.

:doc:`/scripts/base/frameworks/logging/writers/ascii.zeek`

   Interface for the ASCII log writer.  Redefinable options are available
   to tweak the output format of ASCII logs.
   
   The ASCII writer currently supports one writer-specific per-filter config
   option: setting ``tsv`` to the string ``T`` turns the output into
   "tab-separated-value" mode where only a single header row with the column
   names is printed out as meta information, with no "# fields" prepended; no
   other meta data gets included in that mode.  Example filter using this::
   
      local f: Log::Filter = [$name = "my-filter",
                              $writer = Log::WRITER_ASCII,
                              $config = table(["tsv"] = "T")];
   

:doc:`/scripts/base/frameworks/logging/writers/sqlite.zeek`

   Interface for the SQLite log writer. Redefinable options are available
   to tweak the output format of the SQLite reader.
   
   See :doc:`/frameworks/logging-input-sqlite` for an introduction on how to
   use the SQLite log writer.
   
   The SQL writer currently supports one writer-specific filter option via
   ``config``: setting ``tablename`` sets the name of the table that is used
   or created in the SQLite database. An example for this is given in the
   introduction mentioned above.

:doc:`/scripts/base/frameworks/logging/writers/none.zeek`

   Interface for the None log writer. This writer is mainly for debugging.

Package: base/bif
=================


:doc:`/scripts/base/bif/const.bif.zeek`

   Declaration of various scripting-layer constants that the Zeek core uses
   internally.  Documentation and default values for the scripting-layer
   variables themselves are found in :doc:`/scripts/base/init-bare.zeek`.

:doc:`/scripts/base/bif/types.bif.zeek`

   Declaration of various types that the Zeek core uses internally.

:doc:`/scripts/base/bif/zeek.bif.zeek`

   A collection of built-in functions that implement a variety of things
   such as general programming algorithms, string processing, math functions,
   introspection, type conversion, file/directory manipulation, packet
   filtering, interprocess communication and controlling protocol analyzer
   behavior.
   
   You'll find most of Zeek's built-in functions that aren't protocol-specific
   in this file.

:doc:`/scripts/base/bif/stats.bif.zeek`


:doc:`/scripts/base/bif/reporter.bif.zeek`

   The reporter built-in functions allow for the scripting layer to
   generate messages of varying severity.  If no event handlers
   exist for reporter messages, the messages are output to stderr.
   If event handlers do exist, it's assumed they take care of determining
   how/where to output the messages.
   
   See :doc:`/scripts/base/frameworks/reporter/main.zeek` for a convenient
   reporter message logging framework.

:doc:`/scripts/base/bif/strings.bif.zeek`

   Definitions of built-in functions related to string processing and
   manipulation.

:doc:`/scripts/base/bif/option.bif.zeek`

   Definitions of built-in functions that allow the scripting layer to
   change the value of options and to be notified when option values change.

:doc:`/scripts/base/bif/supervisor.bif.zeek`

   The BIFs that define the Zeek supervisor control interface.

:doc:`/scripts/base/bif/plugins/Zeek_SNMP.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_KRB.types.bif.zeek`


:doc:`/scripts/base/bif/event.bif.zeek`

   The protocol-independent events that the C/C++ core of Zeek can generate.
   
   This is mostly events not related to a specific transport- or
   application-layer protocol, but also includes a few that may be generated
   by more than one protocols analyzer (like events generated by both UDP and
   TCP analysis.)

:doc:`/scripts/base/bif/logging.bif.zeek`

   Internal functions and types used by the logging framework.

:doc:`/scripts/base/bif/comm.bif.zeek`

   Functions and events regarding broker communication mechanisms.

:doc:`/scripts/base/bif/messaging.bif.zeek`

   Functions for peering and various messaging patterns.

:doc:`/scripts/base/bif/data.bif.zeek`

   Functions for inspecting and manipulating broker data.

:doc:`/scripts/base/bif/store.bif.zeek`

   Functions to interface with broker's distributed data store.

:doc:`/scripts/base/bif/input.bif.zeek`

   Internal functions and types used by the input framework.

:doc:`/scripts/base/bif/analyzer.bif.zeek`

   Internal functions and types used by the analyzer framework.

:doc:`/scripts/base/bif/file_analysis.bif.zeek`

   Internal functions and types used by the file analysis framework.

:doc:`/scripts/base/bif/__load__.zeek`


:doc:`/scripts/base/bif/zeekygen.bif.zeek`

   Functions for querying script, package, or variable documentation.

:doc:`/scripts/base/bif/pcap.bif.zeek`


:doc:`/scripts/base/bif/bloom-filter.bif.zeek`

   Functions to create and manipulate Bloom filters.

:doc:`/scripts/base/bif/cardinality-counter.bif.zeek`

   Functions to create and manipulate probabilistic cardinality counters.

:doc:`/scripts/base/bif/top-k.bif.zeek`

   Functions to probabilistically determine top-k elements.

:doc:`/scripts/base/bif/plugins/__load__.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_ARP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_BitTorrent.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_ConnSize.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_ConnSize.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DCE_RPC.consts.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DCE_RPC.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DCE_RPC.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DHCP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DHCP.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DNP3.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DNS.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_File.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Finger.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_FTP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_FTP.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Gnutella.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_GSSAPI.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_GTPv1.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_HTTP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_HTTP.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_ICMP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Ident.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_IMAP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_IRC.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_KRB.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Login.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Login.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_MIME.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Modbus.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_MQTT.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_MQTT.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_MySQL.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NCP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NCP.consts.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NetBIOS.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NetBIOS.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NTLM.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NTLM.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NTP.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NTP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_POP3.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RADIUS.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RDP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RDP.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RFB.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RPC.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SIP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_check_directory.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_close.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_create_directory.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_echo.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_logoff_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_negotiate.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_nt_create_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_nt_cancel.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_query_information.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_read_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_session_setup_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_transaction.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_transaction_secondary.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_transaction2.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_transaction2_secondary.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_tree_connect_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_tree_disconnect.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_write_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_close.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_create.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_negotiate.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_read.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_session_setup.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_set_info.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_tree_connect.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_tree_disconnect.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_write.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_transform_header.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.consts.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMTP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMTP.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SNMP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SOCKS.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSH.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSH.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSL.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSL.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSL.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSL.consts.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SteppingStone.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Syslog.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_TCP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_TCP.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_TCP.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Teredo.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_UDP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_VXLAN.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_XMPP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_FileEntropy.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_FileExtract.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_FileExtract.functions.bif.zeek`

   Internal functions used by the extraction file analyzer.

:doc:`/scripts/base/bif/plugins/Zeek_FileHash.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_PE.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Unified2.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Unified2.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_X509.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_X509.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_X509.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_X509.ocsp_events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_AsciiReader.ascii.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_BenchmarkReader.benchmark.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_BinaryReader.binary.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_ConfigReader.config.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RawReader.raw.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SQLiteReader.sqlite.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_AsciiWriter.ascii.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NoneWriter.none.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SQLiteWriter.sqlite.bif.zeek`


Package: base/bif/plugins
=========================


:doc:`/scripts/base/bif/plugins/Zeek_SNMP.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_KRB.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/__load__.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_ARP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_BitTorrent.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_ConnSize.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_ConnSize.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DCE_RPC.consts.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DCE_RPC.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DCE_RPC.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DHCP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DHCP.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DNP3.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_DNS.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_File.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Finger.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_FTP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_FTP.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Gnutella.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_GSSAPI.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_GTPv1.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_HTTP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_HTTP.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_ICMP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Ident.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_IMAP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_IRC.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_KRB.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Login.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Login.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_MIME.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Modbus.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_MQTT.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_MQTT.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_MySQL.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NCP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NCP.consts.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NetBIOS.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NetBIOS.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NTLM.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NTLM.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NTP.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NTP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_POP3.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RADIUS.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RDP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RDP.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RFB.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RPC.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SIP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_check_directory.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_close.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_create_directory.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_echo.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_logoff_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_negotiate.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_nt_create_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_nt_cancel.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_query_information.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_read_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_session_setup_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_transaction.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_transaction_secondary.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_transaction2.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_transaction2_secondary.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_tree_connect_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_tree_disconnect.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_com_write_andx.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb1_events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_close.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_create.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_negotiate.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_read.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_session_setup.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_set_info.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_tree_connect.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_tree_disconnect.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_write.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_com_transform_header.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.smb2_events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.consts.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMB.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMTP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SMTP.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SNMP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SOCKS.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSH.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSH.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSL.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSL.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSL.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SSL.consts.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SteppingStone.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Syslog.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_TCP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_TCP.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_TCP.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Teredo.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_UDP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_VXLAN.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_XMPP.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_FileEntropy.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_FileExtract.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_FileExtract.functions.bif.zeek`

   Internal functions used by the extraction file analyzer.

:doc:`/scripts/base/bif/plugins/Zeek_FileHash.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_PE.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Unified2.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_Unified2.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_X509.events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_X509.types.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_X509.functions.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_X509.ocsp_events.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_AsciiReader.ascii.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_BenchmarkReader.benchmark.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_BinaryReader.binary.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_ConfigReader.config.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_RawReader.raw.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SQLiteReader.sqlite.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_AsciiWriter.ascii.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_NoneWriter.none.bif.zeek`


:doc:`/scripts/base/bif/plugins/Zeek_SQLiteWriter.sqlite.bif.zeek`


Package: base/frameworks/logging/postprocessors
===============================================


:doc:`/scripts/base/frameworks/logging/postprocessors/__load__.zeek`


:doc:`/scripts/base/frameworks/logging/postprocessors/scp.zeek`

   This script defines a postprocessing function that can be applied
   to a logging filter in order to automatically SCP (secure copy)
   a log stream (or a subset of it) to a remote host at configurable
   rotation time intervals.  Generally, to use this functionality
   you must handle the :zeek:id:`zeek_init` event and do the following
   in your handler:
   
   1) Create a new :zeek:type:`Log::Filter` record that defines a name/path,
      rotation interval, and set the ``postprocessor`` to
      :zeek:id:`Log::scp_postprocessor`.
   2) Add the filter to a logging stream using :zeek:id:`Log::add_filter`.
   3) Add a table entry to :zeek:id:`Log::scp_destinations` for the filter's
      writer/path pair which defines a set of :zeek:type:`Log::SCPDestination`
      records.

:doc:`/scripts/base/frameworks/logging/postprocessors/sftp.zeek`

   This script defines a postprocessing function that can be applied
   to a logging filter in order to automatically SFTP
   a log stream (or a subset of it) to a remote host at configurable
   rotation time intervals.  Generally, to use this functionality
   you must handle the :zeek:id:`zeek_init` event and do the following
   in your handler:
   
   1) Create a new :zeek:type:`Log::Filter` record that defines a name/path,
      rotation interval, and set the ``postprocessor`` to
      :zeek:id:`Log::sftp_postprocessor`.
   2) Add the filter to a logging stream using :zeek:id:`Log::add_filter`.
   3) Add a table entry to :zeek:id:`Log::sftp_destinations` for the filter's
      writer/path pair which defines a set of :zeek:type:`Log::SFTPDestination`
      records.

Package: base/frameworks/broker
===============================


:doc:`/scripts/base/frameworks/broker/__load__.zeek`


:doc:`/scripts/base/frameworks/broker/main.zeek`

   The Broker-based communication API and its various options.

:doc:`/scripts/base/frameworks/broker/store.zeek`

   The Broker-based data store API and its various options.

:doc:`/scripts/base/frameworks/broker/log.zeek`


Package: base/frameworks/supervisor
===================================


:doc:`/scripts/base/frameworks/supervisor/api.zeek`

   The Zeek process supervision API.
   This API was introduced in Zeek 3.1.0 and considered unstable until 4.0.0.
   That is, it may change in various incompatible ways without warning or
   deprecation until the stable 4.0.0 release.

:doc:`/scripts/base/frameworks/supervisor/__load__.zeek`


:doc:`/scripts/base/frameworks/supervisor/control.zeek`

   The Zeek process supervision (remote) control API.  This defines a Broker topic
   prefix and events that can be used to control an external Zeek supervisor process.
   This API was introduced in Zeek 3.1.0 and considered unstable until 4.0.0.
   That is, it may change in various incompatible ways without warning or
   deprecation until the stable 4.0.0 release.

:doc:`/scripts/base/frameworks/supervisor/main.zeek`

   Implements Zeek process supervision API and default behavior for its
   associated (remote) control events.

Package: base/frameworks/input
==============================


:doc:`/scripts/base/frameworks/input/__load__.zeek`


:doc:`/scripts/base/frameworks/input/main.zeek`

   The input framework provides a way to read previously stored data either
   as an event stream or into a Zeek table.

:doc:`/scripts/base/frameworks/input/readers/ascii.zeek`

   Interface for the ascii input reader.
   
   The defaults are set to match Zeek's ASCII output.

:doc:`/scripts/base/frameworks/input/readers/raw.zeek`

   Interface for the raw input reader.

:doc:`/scripts/base/frameworks/input/readers/benchmark.zeek`

   Interface for the benchmark input reader.

:doc:`/scripts/base/frameworks/input/readers/binary.zeek`

   Interface for the binary input reader.

:doc:`/scripts/base/frameworks/input/readers/config.zeek`

   Interface for the config input reader.

:doc:`/scripts/base/frameworks/input/readers/sqlite.zeek`

   Interface for the SQLite input reader. Redefinable options are available
   to tweak the input format of the SQLite reader.
   
   See :doc:`/frameworks/logging-input-sqlite` for an introduction on how to
   use the SQLite reader.
   
   When using the SQLite reader, you have to specify the SQL query that returns
   the desired data by setting ``query`` in the ``config`` table. See the
   introduction mentioned above for an example.

Package: base/frameworks/analyzer
=================================


:doc:`/scripts/base/frameworks/analyzer/__load__.zeek`


:doc:`/scripts/base/frameworks/analyzer/main.zeek`

   Framework for managing Zeek's protocol analyzers.
   
   The analyzer framework allows to dynamically enable or disable analyzers, as
   well as to manage the well-known ports which automatically activate a
   particular analyzer for new connections.
   
   Protocol analyzers are identified by unique tags of type
   :zeek:type:`Analyzer::Tag`, such as :zeek:enum:`Analyzer::ANALYZER_HTTP`.
   These tags are defined internally by
   the analyzers themselves, and documented in their analyzer-specific
   description along with the events that they generate.

Package: base/frameworks/files
==============================


:doc:`/scripts/base/frameworks/files/__load__.zeek`


:doc:`/scripts/base/frameworks/files/main.zeek`

   An interface for driving the analysis of files, possibly independent of
   any network protocol over which they're transported.

:doc:`/scripts/base/frameworks/files/magic/__load__.zeek`


Package: base/frameworks/files/magic
====================================


:doc:`/scripts/base/frameworks/files/magic/__load__.zeek`


Package: NCSA/external_dns
==========================

Zeek Package for External DNS
================================================

.. image:: https://github.com/grigorescu/external_dns/workflows/Package%20btests/badge.svg
   :target: https://github.com/grigorescu/external_dns/actions
   :alt: Build Status

.. image:: https://coveralls.io/repos/github/grigorescu/external_dns/badge.svg?branch=master
   :target: https://coveralls.io/repos/github/grigorescu/external_dns?branch=master
   :alt: Coverage Status


.. image:: https://img.shields.io/github/license/grigorescu/external_dns
   :target: ./LICENSE
   :alt: BSD license


Raises a notice when a client is observed querying an external DNS server

Getting Started
---------------

These instructions will get you a copy of the package up and running on your Zeek cluster. See development for notes on how to install the package in order to hack on or contribute to it.

Prerequisites
-------------

This is a package designed to run with the `Zeek Network Security Monitor<https://zeek.org>`_. First, `get Zeek<https://zeek.org/get-zeek/>`_. We strive to support both the current feature and LTS releases.

The recommended installation method is via the `Zeek package manager, zkg<https://docs.zeek.org/projects/package-manager/en/stable/>`_. On any recent system, run `pip install zkg`. After installation, run `zkg autoconfig`. For more information, see the `zkg documentation<https://docs.zeek.org/projects/package-manager/en/stable/quickstart.html>`_.

Installing
----------

To install the package, run:

.. code-block:: shell

   zkg install https://github.com/grigorescu/external_dns


If this is being installed on a cluster, install the package on the manager, then deploy it via: 

.. code-block:: shell

   zeekctl deploy


Running the tests
-----------------

`zkg` will run the test suite before installing. To manually run the tests, go into the `tests` directory, and run `make`.

Contributing
------------

Please read `CONTRIBUTING.md<./docs/CONTRIBUTING.md>`_ for details on how to contribute.

Versioning
----------

We use `SemVer<http://semver.org/>`_ for versioning. For the versions available, see the `tags on this repository<../../tags>`_. 

Credits
-------


* Justin Azoff <`jazoff@illinois.edu<mailto:jazoff@illinois.edu>`_>


See also the list of `contributors<contributors>`_ who participated in this project.

License
-------

This project is licensed under the BSD license. See the `LICENSE<LICENSE>`_ file for details.

Acknowledgments
---------------

* ESnet team for Zeek Package Cookie Cutter

:doc:`/scripts/NCSA/external_dns/__load__.zeek`

   This is processed when a user explicitly loads the plugin's script module
   through `@load NCSA/external_dns`.
   Include code here that should execute at that point.
   
   This is the most common entry point to your plugin's accompanying scripts.
   
   File load order, always happens
     1. Zeek startup
     2. Plugin activation
     3. __preload__.zeek always gets loaded
     4. __load__.zeek always gets loaded
   
   ONLY IF the plugin gets loaded via `@load NCSA/external_dns`, this continues:
     5. @load NCSA/external_dns/__load__.zeek <-- YOU ARE HERE

:doc:`/scripts/NCSA/external_dns/main.zeek`

   Raises a notice when a client is observed querying an external DNS server

Package: base/frameworks/notice
===============================


:doc:`/scripts/base/frameworks/notice/__load__.zeek`


:doc:`/scripts/base/frameworks/notice/main.zeek`

   This is the notice framework which enables Zeek to "notice" things which
   are odd or potentially bad.  Decisions of the meaning of various notices
   need to be done per site because Zeek does not ship with assumptions about
   what is bad activity for sites.  More extensive documentation about using
   the notice framework can be found in :doc:`/frameworks/notice`.

:doc:`/scripts/base/frameworks/notice/weird.zeek`

   This script provides a default set of actions to take for "weird activity"
   events generated from Zeek's event engine.  Weird activity is defined as
   unusual or exceptional activity that can indicate malformed connections,
   traffic that doesn't conform to a particular protocol, malfunctioning
   or misconfigured hardware, or even an attacker attempting to avoid/confuse
   a sensor.  Without context, it's hard to judge whether a particular
   category of weird activity is interesting, but this script provides
   a starting point for the user.

:doc:`/scripts/base/frameworks/notice/actions/email_admin.zeek`

   Adds a new notice action type which can be used to email notices
   to the administrators of a particular address space as set by
   :zeek:id:`Site::local_admins` if the notice contains a source
   or destination address that lies within their space.

:doc:`/scripts/base/frameworks/notice/actions/page.zeek`

   Allows configuration of a pager email address to which notices can be sent.

:doc:`/scripts/base/frameworks/notice/actions/add-geodata.zeek`

   This script adds geographic location data to notices for the "remote"
   host in a connection.  It does make the assumption that one of the 
   addresses in a connection is "local" and one is "remote" which is 
   probably a safe assumption to make in most cases.  If both addresses
   are remote, it will use the $src address.

:doc:`/scripts/base/frameworks/notice/actions/pp-alarms.zeek`

   Notice extension that mails out a pretty-printed version of alarm.log
   in regular intervals, formatted for better human readability. If activated,
   that replaces the default summary mail having the raw log output.

Package: base/frameworks/cluster
================================


:doc:`/scripts/base/frameworks/cluster/__load__.zeek`


:doc:`/scripts/base/frameworks/cluster/main.zeek`

   A framework for establishing and controlling a cluster of Zeek instances.
   In order to use the cluster framework, a script named
   ``cluster-layout.zeek`` must exist somewhere in Zeek's script search path
   which has a cluster definition of the :zeek:id:`Cluster::nodes` variable.
   The ``CLUSTER_NODE`` environment variable or :zeek:id:`Cluster::node`
   must also be sent and the cluster framework loaded as a package like
   ``@load base/frameworks/cluster``.

:doc:`/scripts/base/frameworks/cluster/pools.zeek`

   Defines an interface for managing pools of cluster nodes.  Pools are
   a useful way to distribute work or data among nodes within a cluster.

Package: base/frameworks/control
================================


:doc:`/scripts/base/frameworks/control/__load__.zeek`


:doc:`/scripts/base/frameworks/control/main.zeek`

   The control framework provides the foundation for providing "commands"
   that can be taken remotely at runtime to modify a running Zeek instance
   or collect information from the running instance.

Package: base/protocols/dns
===========================


:doc:`/scripts/base/protocols/dns/__load__.zeek`


:doc:`/scripts/base/protocols/dns/consts.zeek`

   Types, errors, and fields for analyzing DNS data.  A helper file
   for DNS analysis scripts.

:doc:`/scripts/base/protocols/dns/main.zeek`

   Base DNS analysis script which tracks and logs DNS queries along with
   their responses.

